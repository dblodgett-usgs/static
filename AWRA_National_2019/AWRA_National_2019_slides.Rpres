R tools for water resources
========================================================
author: David Blodgett and Laura DeCicco
date: 11/1/2019
autosize: true

========================================================
**Introduction**

These slides provide resources and examples for two
common water resources applications in the R programming
language. 

A companion workflow to get all the data and perform
processing operations is available [here](https://github.com/dblodgett-usgs/static/blob/master/AWRA_National_2019/get_data.R).

***

- Introduction to examples
- Background and resources
- Data access
- Data visualization
- Spatial intersection
- Water budget analysis
- Trend analysis
- Synthesis

========================================================
Application 1: Water Budget  

Access and compare precipitation, evapotranspiration and 
streamflow.
```{r wb_example_map, echo = FALSE, fig.height = 6}
plot(sf::st_geometry(sf::read_sf(system.file("shape/nc.shp", package = "sf"))))
```
***

```{r wb_example_plot, echo = FALSE}
plot(cars)
```

========================================================
Application 2: Trends and Plotting  

<small>Exploration and Graphics for RivEr Trends ([EGRET](http://usgs-r.github.io/EGRET/)): A package for analysis of long-term changes in water quality and streamflow.</small>
```{r trend1, echo = FALSE,   fig.width = 5, fig.height = 5}
library(EGRET)
library(drake)
loadd(eList)
plotConcHist(eList)

```
***
```{r trend2, echo = FALSE}
plot(eList)
```

========================================================

Background:  
* R hydro tools build on packages.
* [tidyverse](https://www.tidyverse.org/), [r-spatial](https://www.r-spatial.org/), etc.
* Plotting with [base-r](https://rstudio-pubs-static.s3.amazonaws.com/84527_6b8334fd3d9348579681b24d156e7e9d.html) and [ggplot2](https://ggplot2.tidyverse.org/).
* Web-search is your friend!

***

Resources:  
* [Github USGS-R](https://github.com/USGS-R)
* [USGS Resources](https://owi.usgs.gov/R/)
* [USGS Blogs](https://waterdata.usgs.gov/blog/tags/r/)
* [CRAN Task View](https://cran.r-project.org/web/views/Hydrology.html)

Spatial Data Access 
========================================================
See nhdplusTools tutorial [here.](https://usgs-r.github.io/nhdplusTools/articles/nhdplusTools.html)
```{r spatial, eval = FALSE, echo = TRUE}
library(nhdplusTools)
site <- list(featureSource = "nwissite", 
             featureID = "USGS-10128500")

ut_line <- navigate_nldi(site, "UT", "")
ut_site <- navigate_nldi(site, "UT", "nwissite")

nhdp <- subset_nhdplus(ut$nhdplus_comid, 
                       "nhdp_subset.gpkg", 
                       "download")
```

========================================================
```{r plot simple, echo = FALSE, message = FALSE, warning = FALSE, fig.width = 12, fig.height = 8}
library(sf)
library(prettymapr)
library(rosm)
loadd(flowline)
loadd(catchment)
loadd(simple_UT_site)

sp_bbox <- function(g) {
  matrix(as.numeric(st_bbox(g)), 
         nrow = 2, dimnames = list(c("x", "y"), 
                                   c("min", "max")))
}

prep_layer <- function(x) st_geometry(st_transform(x, 3857))

st_precision(catchment) = 10000
boundary <- st_union(st_geometry(catchment))

prettymap({
  osm.plot(sp_bbox(catchment), type = "cartolight", quiet = TRUE)
  plot(prep_layer(catchment), lwd = 0.5, col = NA, border = "grey", add = TRUE)
    plot(prep_layer(boundary), lwd = 1, col = NA, border = "black", add = TRUE)
  plot(prep_layer(flowline), lwd = flowline$streamorde - 0.5, col = "blue", add = TRUE)
  plot(prep_layer(simple_UT_site), col = "red", pch = 17, add = TRUE)
}, drawarrow = TRUE, title = paste("NHDPlus Upstream of Gage:", simple_UT_site$name), 
scale.label.cex = 2, arrow.scale = 2)
```

Observations Data Access 
========================================================

See a dataRetrieval tutorial [here.](https://owi.usgs.gov/R/dataRetrieval.html#1)
```{r observations,   eval = FALSE, echo = TRUE}
library(dataRetrieval)
flow <- readNWISdv("10128500", "00060")
```

```{r observationsRun,   eval = TRUE, echo = FALSE, fig.width = 12, fig.height = 5}
loadd(flowData)
parameterInfo <- attr(flowData, "variableInfo")
siteInfo <- attr(flowData, "siteInfo")

unescape_html <- function(str){
  fancy_chars <- regmatches(str, gregexpr("&#\\d{3};",str)) 

  unescaped <- xml2::xml_text(xml2::read_html(paste0("<x>", fancy_chars, "</x>")))

  fancy_chars <- gsub(pattern = "&#\\d{3};", 
                      replacement = unescaped, x = str)

  fancy_chars <- gsub("Ã‚","", fancy_chars)
  return(fancy_chars)
}

plot(flowData$Date, flowData$X_00060_00003,
     xlab = "Date", pch = ".", col="red",
     ylab = unescape_html (parameterInfo$variableName))

```


Spatial Data Visualization 
========================================================
lorem ipsum
```{r spatial_map_code, eval = FALSE}
plot(sf::st_geometry(flowline)))
```

***

```{r spatial_map, echo = FALSE, fig.height = 6}
plot(sf::st_geometry(flowline))
```

Spatial Data Visualization 
========================================================
lorem ipsum
```{r obs_map_code, eval = FALSE}
plot(x)
```

***

```{r obs_map, eval = FALSE, echo = FALSE, fig.height = 6}
plot(x)
```

Spatial Intersection
========================================================
```{r intersectr}
library(intersectr)
```

Water Budget Analysis
========================================================
```{r wb}
q <- 1
e <- 0.5
p <- 1.5

setNames(p - q - e, "Change in Storage")
```


Trend Analysis
========================================================
```{r egret,  echo = TRUE, eval = FALSE}
library(EGRET)
Daily <- readNWISDaily(siteNumber = "10128500")
Sample = readNWISSample(siteNumber = "10128500",
                        parameterCd = "00095",
                        endDate = "2018-01-01")
INFO = readNWISInfo(siteNumber = "10128500",
                    parameterCd = "00095",
                    interactive = FALSE)
eList = mergeReport(INFO = INFO,
                    Daily = Daily,
                    Sample = Sample) %>% 
    modelEstimation()
```

========================================================
Here be some cool plot!
```{r summary, fig.height = 6}
plotContours(eList, 1980, 2012, flowDuration = FALSE)
```
***
Here be some cool plot!
```{r summary2, fig.height = 6}
plotDiffContours(eList, 1980, 2012)
```

Summary
========================================================
- we showed this
- we showed that
- this is cool
- that is cool
- go here to see more of this
- go here to see more of that

***

```{r summary3, fig.height = 6, echo = FALSE}
plot(cars, main = "final cool plot")
```

